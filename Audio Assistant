import speech_recognition as sr
import pyttsx3
import wikipedia
import pywhatkit
import requests
import datetime
import distutils
import pytz
import pycountry
from bs4 import BeautifulSoup
import subprocess
import pyautogui
import time
import webbrowser
from googlesearch import search


engine = pyttsx3.init()
voices = engine.getProperty('voices')
engine.setProperty('voice', voices[1].id)

def talk(text):
    engine.say(text)
    engine.runAndWait()

def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        talk("How can I help you?")
        print("Listening...")
        recognizer.pause_threshold = 1
        audio = recognizer.listen(source)

    try:
        print("Recognizing...")
        command = recognizer.recognize_google(audio)
        print(f"User said: {command}\n")
    except Exception as e:
        print("Sorry, I did not catch that. Could you please repeat?")
        return "None"
    
    return command.lower()


def search_google(query):
    """Search Google for the given query and return the top results."""
    results = []
    try:
        for result in search(query, num_results=5):
            results.append(result)
    except Exception as e:
        return f"Error: {e}"
    return results
    

def open_netflix_movie(movie_name):
    movie_name_encoded = movie_name.replace(" ", "%20")
    netflix_url = f"https://www.netflix.com/search?q={movie_name_encoded}"
    talk(f"opening {movie_name} on Netflix")
    webbrowser.open(netflix_url)


def play_on_youtube(song):
    pywhatkit.playonyt(song)


def get_time(timezone_str="UTC"):
    try:
        timezone = pytz.timezone(timezone_str)
    except pytz.UnknownTimeZoneError:
        return "Unknown timezone"
    
    current_time = datetime.datetime.now(timezone).strftime('%I:%M %p')
    return current_time

def extract_timezone_from_command(command):
    command_lower = command.lower()
    
    # Check if any timezone names are in the command
    for tz in pytz.all_timezones:
        if tz.lower() in command_lower:
            return tz
    
    # Check if any country names are in the command
    for country in pycountry.countries:
        if country.name.lower() in command_lower:
            country_code = country.alpha_2
            # Return the primary timezone for this country if available
            if country_code in pytz.country_timezones:
                return pytz.country_timezones[country_code][0]
    
    return None
    
def get_weather(city):
    weather_url = "https://weatherstack.com" 
    
    try:
        return weather_url
    except Exception as e:
        return f"Error: {e}"
    
def open_notepad_and_write():
    talk("Opening Notepad")
    notepad_process = subprocess.Popen(['notepad.exe'])
    time.sleep(1)  # Wait for Notepad to open

    talk("You can start dictating your text. Say 'quit notepad' or 'exit notepad' to stop.")
    while True:
        text_to_write = listen().lower()
        if "quit notepad" in text_to_write or "exit notepad" in text_to_write:
            talk("Closing Notepad.")
            notepad_process.terminate()  # Close the Notepad window
            break
        if text_to_write:
            pyautogui.typewrite(text_to_write + "\n")
            talk("Text added to Notepad")
    

    
def run_assistant():
    command = listen()
    if "netflix" in command:
            removeplay = command.replace("play", "").strip()
            movie_name = removeplay.replace("on netflix", "").strip()
            if movie_name:
                open_netflix_movie(movie_name)
            else:
                talk("Please specify the name of the movie or show to open on Netflix.")
    elif 'time' in command:
        # Extract timezone from the command
        timezone_str = extract_timezone_from_command(command)
        
        if timezone_str is None:
            timezone_str = "UTC"  # Default to UTC if no specific timezone is mentioned

        time = get_time(timezone_str)
        
        if time == "Unknown timezone":
            talk("Sorry, I couldn't find that timezone.")
        else:
            talk(f'The time in {timezone_str} is {time}')

    elif 'weather' in command:
        city = command.replace('weather', '').strip()
        weather_info = get_weather(city)
        print("Sorry I cannot get the weather, you can use this link "+ weather_info +" to get it.")
        talk("Sorry I cannot get the weather, you can use this link to get it")
    
    elif 'play' in command:
        song = command.replace('can you play', '')
        talk(f'Playing {song}')
        play_on_youtube(song)

    elif 'who created you' in command:
        talk("Jana Ayman created me")
    
    elif ("search for" or "what" or "who" or "how") or "is" or "are" in command :
            query = command.replace("search for", "").replace("what is", "").strip()
            if query:
                results = search_google(query)
                if results:
                    talk(f"Here are the top results for {query}:")
                    for result in results:
                        print(result)
                else:
                    talk(f"No results found for {query}.")
            else:
                talk("Please specify the information you are looking for.")
    elif "open notepad" in command:
            open_notepad_and_write()

    elif "exit program" in command or "quit program" in command:
        talk("Goodbye!")
        return

    else:
        talk("Sorry, I didn't understand that command.")

while True:
    run_assistant()
